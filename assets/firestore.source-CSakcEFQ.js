import{o as n,K as h,w as r,x as s,af as d,ae as u,ah as f,M as w,as as y,at as v,S as g}from"./index-Rp__Yzw6.js";class S{constructor(a,t){this.dataSource=a,this.cacheProvider=t}async getById(a){const t=await this.cacheProvider.get(a);if(t)return t;const e=await this.dataSource.getById(a);return e&&await this.cacheProvider.set(a,e),e}async getAll(a){if(a&&a.filters&&a.filters.length>0)return this.dataSource.getAll(a);const t=await this.cacheProvider.getAll();if(t)return t;const e=await this.dataSource.getAll();return e&&e.length>0&&await this.cacheProvider.setAll(e),e}async create(a){const t=await this.dataSource.create(a);return await this.cacheProvider.clear(),t}async update(a,t){const e=await this.dataSource.update(a,t);return await this.cacheProvider.invalidate(a),await this.cacheProvider.clear(),e}async delete(a){await this.dataSource.delete(a),await this.cacheProvider.invalidate(a),await this.cacheProvider.clear()}async invalidateCache(a){a?await this.cacheProvider.invalidate(a):await this.cacheProvider.clear()}}class R{async get(a){return null}async getAll(){return null}async set(a,t){}async setAll(a){}async invalidate(a){}async clear(){}}class A{constructor(a){this.collectionPath=a,this.db=n()}get collectionRef(){return h(this.db,this.collectionPath)}async getById(a){const t=r(this.collectionRef,a),e=await s(t);return e.exists()?{id:e.id,...e.data()}:null}async getAll(a){let t=d(this.collectionRef);return a&&a.filters&&a.filters.forEach(c=>{t=d(t,u(c.field,c.operator,c.value))}),a&&a.sort&&(t=d(t,f(a.sort.field,a.sort.direction))),(await w(t)).docs.map(c=>({id:c.id,...c.data()}))}async create(a){const{id:t,...e}=a,c=await y(this.collectionRef,e),i=await s(c);return{id:i.id,...i.data()}}async update(a,t){const e=r(this.collectionRef,a),{id:c,...i}=t;await v(e,i);const l=await s(e);return{id:l.id,...l.data()}}async delete(a){const t=r(this.collectionRef,a);await g(t)}}export{A as F,R as N,S as R};
